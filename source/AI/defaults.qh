// ai/defaults.qh

.float dodge;         // used for straifing
.vector futuretarget; // used for aim ahead target
.void() nextaction;   // used to set a future nextthink event for monsters using aim_ahead

// Team AI ----------------------------------------------------------------------

//        Karlos Quake Monster Teams
//
//    We need to implement some nice system for having monster teams. Teams will
// share info on location of enemies etc., and monsters within a team will be
// able to call for assistance from their team mates. So, if a monster is in
// real danger of being killed by an enemy, he can call for help. Any of his team
// within a realistic range, who are not currently occupied will be able to
// respond
//
//    Each monster will be able to have a unique enemy as per normal. However
// the team will also have a group enemy, which will be either any client and / or
// any member of any other team deemed hostile.
//    Other teams will not be deemed hostile by default, but if a member of team
// 'A' kills a member of team 'B', then the whole of team 'A' will be deemed as
// hostile to team 'B'. Members of team 'B' will then attack meembers of team 'A'
// without provocation
//
//    Lastly, each team will have a designated leader. Whoever he engages in comabt
// with will be set as the primary enemy for his team. The team leader will be able
// to override the default behaviour of any of his team, in effect, giving the
// order to attack another momnster / team etc.
//    If the team leader is killed, the remaining individuals will become free to
// join any existing compatible team (same class and not enemy), or to go it alone.
// If the latter route is taken, individuals will still recognise each other and
// avoid attacking, but will cease to share info on enemies etc..

.float ai_team_id;    // The team id a monster belongs to
                      // Will be zero for loners....

.float ai_team_class; // the basic class of a monsters team
                      // used to recognise equivalent teams
.float ai_team_pos;   // actual position within the team

.entity ai_team;

// team id's will be powers of 2 - that way, each team will have a unique bit
// in a mask which can be used to recognise any combination of other teams

// team bits in precache cvar (actually offset by 1 bit to allow normal precache setting)

float TEAM_MAX_BITS        = 31;         // def teamsize (0-31)
float TEAM_DISP_BITS       = 992;       // team dispersion
float TEAM_SAME_TOL_BITS   = 31744;      // how tolerant of same team class
float TEAM_DIFF_TOL_BITS   = 1015808;    // how tolerant of diff team class

// default ai_team_max_size      = 16
// default ai_team_spread      = 0.25
// default ai_team_tolerance_same = 0.75   -- higher == more tolerant
// default ai_team_tolerance_diff = 0.25

float ai_team_unteamed;      // Number of unteamed monsters
float ai_team_max_size;      // maximum team size

float ai_team_spread;        // how closely packed teams are (0.0 - 1.0)
                             // 0.0 : follows placement order (linear)
                             // 1.0 : totally random ordering

float ai_team_tolerance_same;  // how tolerant of equivalent teams
float ai_team_tolerance_diff;  // how tolerant of non-equivalent teams

float TEAM_WORLD  = 0;    // world / traps have zero id to stop monsters getting
                          // mad at them
float TEAM_CLIENT = 4096; // all clients are regarded as a single team
float TEAM_NONE   = 8192; // for loners
float TEAM_ANY    = 16383;

// grunts / enforcers / dogs

float TEAM_ARMY_1 = 1;  // group id for this team
float TEAM_ARMY_2 = 2;  // all monsters in the same group id considered friendly
float TEAM_ARMY_3 = 4;

// knights / hell knights

float TEAM_KNIGHT_1 = 8;
float TEAM_KNIGHT_2 = 16;
float TEAM_KNIGHT_3 = 32;

float team_knight_1_size;
float team_knight_2_size;
float team_knight_3_size;


// fish / zombies / scraggs

float TEAM_UNDEAD_1 = 64;
float TEAM_UNDEAD_2 = 128;
float TEAM_UNDEAD_3 = 256;

// ogres

float TEAM_OGRE_1 = 512;
float TEAM_OGRE_2 = 1024;
float TEAM_OGRE_3 = 2048;

// misc stuff
entity sight_entity;
float current_yaw;
float enemy_yaw;
float enemy_vis, enemy_infront, enemy_range;
float sight_entity_time;

void () version_AI =
{
    sprint(self, "KQ/AI 2.05 07:05:2000\n");
};
